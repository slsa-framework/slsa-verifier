package v1

import (
	"fmt"

	serrors "github.com/slsa-framework/slsa-verifier/v2/errors"
	"github.com/slsa-framework/slsa-verifier/v2/verifiers/utils"
)

// GithubAttestBuildType is the build type for the github attest based builder.
var GithubAttestBuildType = "https://actions.github.io/buildtypes/workflow/v1"

// GithubAttestProvenance is provenance generated by an action using github's attest action.
type GithubAttestProvenance struct {
	*provenanceV1
}

func (p *GithubAttestProvenance) TriggerURI() (string, error) {
	workflow, err := p.getWorkflow()
	if err != nil {
		return "", err
	}
	repository, ok := workflow["repository"].(string)
	if !ok {
		return "", fmt.Errorf("%w: %s", serrors.ErrorInvalidFormat, "workflow parameters: repository")
	}
	ref, ok := workflow["ref"].(string)
	if !ok {
		return "", fmt.Errorf("%w: %s", serrors.ErrorInvalidFormat, "workflow parameters: ref")
	}
	uri := fmt.Sprintf("git+%s@%s", repository, ref)
	return uri, nil
}

// GetTag returns the triggering event's tag.
func (p *GithubAttestProvenance) GetTag() (string, error) {
	workflow, err := p.getWorkflow()
	if err != nil {
		return "", err
	}
	ref, ok := workflow["ref"].(string)
	if !ok {
		return "", fmt.Errorf("%w: %s", serrors.ErrorInvalidFormat, "workflow parameters: ref")
	}

	refType, _ := utils.ParseGitRef(ref)
	switch refType {
	case refNameTags:
		return ref, nil
	default:
		return "", fmt.Errorf("%w: non-tag ref type %q for ref %q",
			serrors.ErrorInvalidDssePayload, refType, ref)
	}
}

func (p *GithubAttestProvenance) getWorkflow() (map[string]interface{}, error) {
	externalParams, err := p.getExternalParameters()
	if err != nil {
		return nil, err
	}
	workflow, ok := externalParams["workflow"].(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("%w: %s", serrors.ErrorInvalidFormat, "workflow parameters")
	}
	return workflow, nil
}
